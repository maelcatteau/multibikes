# -*- coding: utf-8 -*-
"""Model MBRentingStockPeriodConfig for multibikes_base module."""
import logging
from odoo import api, fields, models

_logger = logging.getLogger(__name__)


class MBRentingStockPeriodConfig(models.Model):
    _name = "mb.renting.stock.period.config"
    _description = "Configuration de la p√©riode de stock pour la location"
    _rec_name = "period_id"

    period_id = fields.Many2one(
        "mb.renting.period", required=True, ondelete="cascade", string="P√©riode"
    )

    # Champ pour lier les produits stockables
    storable_product_ids = fields.Many2many(
        "product.product",
        string="Produits stockables",
        domain=[("is_storable", "=", True)],
        help="Liste des produits stockables associ√©s √† cette p√©riode",
    )

    storable_product_count = fields.Integer(
        string="Nombre de produits stockables",
        compute="_compute_storable_product_count",
        store=False,
    )

    total_stock_by_product = fields.Text(
        string="D√©tail du stock par produit",
        compute="_compute_total_stock_by_product",
        store=False,
        help="D√©tail des quantit√©s disponibles par produit",
    )

    stock_available_for_period = fields.Integer(
        string="Stock disponible pour la p√©riode",
        help="Stock que vous souhaitez allouer pour cette p√©riode",
        default=0,
    )

    product_codes = fields.Char(
        string="R√©f√©rences produits", compute="_compute_product_codes", store=False
    )

    def needs_transfer(self):
        """
        M√©thode publique pour v√©rifier si ce produit n√©cessite un transfert
        √† la transition de p√©riode
        """
        return self._needs_transfer()

    def create_transfer(self):
        """
        M√©thode publique pour cr√©er un transfert programm√©
        pour la date de d√©but de p√©riode
        """
        return self._create_transfer()

    @api.depends("storable_product_ids")
    def _compute_product_codes(self):
        for record in self:
            codes = []
            for product in record.storable_product_ids:
                codes.append(
                    product.default_code or product.product_tmpl_id.default_code
                )
            record.product_codes = ", ".join(filter(None, codes))

    @api.depends("storable_product_ids")
    def _compute_storable_product_count(self):
        """Calcule le nombre de produits stockables li√©s"""
        for record in self:
            record.storable_product_count = len(record.storable_product_ids)

    @api.depends("storable_product_ids", "storable_product_ids.qty_available")
    def _compute_total_stock_by_product(self):
        """
        Calcule le stock disponible pour chaque produit
        """
        for record in self:

            stock_details_text = []

            if record.storable_product_ids:
                for product in record.storable_product_ids:
                    # qty_available sera recalcul√© automatiquement
                    total_qty = product.qty_available

                    stock_details_text.append(
                        f"Produit: {product.name}"
                        f"(R√©f: {product.default_code or 'N/A'})"
                    )
                    stock_details_text.append(
                        f"Quantit√© totale disponible: {total_qty}"
                    )
                    stock_details_text.append("")

                record.total_stock_by_product = (
                    "\n".join(stock_details_text) or "Aucun stock disponible"
                )
            else:
                record.total_stock_by_product = "Aucun produit stockable s√©lectionn√©"

    def _needs_transfer(self):
        """V√©rifie si ce produit n√©cessite un transfert √† la transition de p√©riode"""
        # Stock disponible √† la date de d√©but de cette p√©riode
        stock_at_period_start = self._get_stock_at_date(self.period_id.start_date)
        desired_stock = self.stock_available_for_period
        return stock_at_period_start != desired_stock

    def _get_stock_at_date(self, target_date):
        """Calcule le stock disponible √† une date donn√©e"""
        if not self.storable_product_ids:
            return 0

        # Utiliser l'API Odoo pour calculer le stock √† une date donn√©e
        product = self.storable_product_ids
        stock_at_date = product.with_context(to_date=target_date).qty_available
        return stock_at_date

    def _get_transfer_direction_and_quantity(self):
        """Calcule la direction et quantit√© du transfert pour la transition"""
        stock_at_period_start = self._get_stock_at_date(self.period_id.start_date)
        desired_stock = self.stock_available_for_period
        difference = stock_at_period_start - desired_stock

        if difference > 0:
            # Trop de stock pr√©vu ‚Üí vers hivernage
            return "to_winter", difference
        # Pas assez de stock pr√©vu ‚Üí depuis hivernage
        return "from_winter", abs(difference)

    def _create_transfer(self):
        """Cr√©e un transfert programm√© pour la date de d√©but de p√©riode"""
        if not self.storable_product_ids:
            return None

        direction, quantity = self._get_transfer_direction_and_quantity()

        if quantity == 0:
            return None

        main_warehouse = self.env["stock.warehouse"].get_main_rental_warehouse()
        winter_warehouse = self.env["stock.warehouse"].get_winter_storage_warehouse()

        if direction == "to_winter":
            source_location = main_warehouse.lot_stock_id
            dest_location = winter_warehouse.lot_stock_id
            transfer_type = "vers hivernage"
        else:
            source_location = winter_warehouse.lot_stock_id
            dest_location = main_warehouse.lot_stock_id
            transfer_type = "depuis hivernage"

        # Cr√©er le picking programm√© pour la date de d√©but de p√©riode
        picking_vals = {
            "picking_type_id": main_warehouse.int_type_id.id,
            "location_id": source_location.id,
            "location_dest_id": dest_location.id,
            "scheduled_date": self.period_id.start_date,  # üéØ DATE DE TRANSITION !
            "origin": f"Transition auto {self.period_id.name} - {transfer_type}",
            "move_ids": [
                (
                    0,
                    0,
                    {
                        "name": f"Transition {self.storable_product_ids.name}",
                        "product_id": self.storable_product_ids.id,
                        "product_uom_qty": quantity,
                        "product_uom": self.storable_product_ids.uom_id.id,
                        "location_id": source_location.id,
                        "location_dest_id": dest_location.id,
                        "date": self.period_id.start_date,  # üéØ DATE PLANIFI√âE !
                    },
                )
            ],
        }

        return self.env["stock.picking"].create(picking_vals)

    @api.model
    def execute_period_transitions(self):
        """M√©thode √† appeler par un cron pour ex√©cuter les transferts programm√©s"""
        today = fields.Date.today()

        # Chercher les p√©riodes qui commencent aujourd'hui
        # ET qui n'ont pas encore √©t√© trait√©es
        periods_starting_today = self.env["mb.renting.period"].search(
            [("start_date", "=", today)]
        )

        transitions_created = 0

        for period in periods_starting_today:
            configs = self.search([("period_id", "=", period.id)])

            for config in configs:
                if config.needs_transfer():
                    # V√©rifier si un transfert n'existe pas d√©j√† pour cette transition
                    existing_transfer = self.env["stock.picking"].search(
                        [
                            ("origin", "ilike", f"Transition auto {period.name}"),
                            ("product_id", "=", config.storable_product_ids.id),
                        ],
                        limit=1,
                    )

                    if not existing_transfer:
                        picking = config.create_transfer()
                        if picking:
                            transitions_created += 1
        return transitions_created

    def action_generate_transfers(self):
        """
        Action pour g√©n√©rer automatiquement les transferts pour cette configuration

        Returns:
            dict: Action de notification ou redirection
        """
        self.ensure_one()

        if not self.storable_product_ids:
            return {
                "type": "ir.actions.client",
                "tag": "display_notification",
                "params": {
                    "title": "Aucun produit s√©lectionn√©",
                    "message": "Veuillez d'abord s√©lectionner des produits stockables.",
                    "type": "warning",
                    "sticky": False,
                },
            }

        # V√©rifier si des transferts existent d√©j√† pour cette configuration
        existing_transfers = self.env["stock.picking"].search(
            [
                ("origin", "ilike", f"Transition auto {self.period_id.name}"),
                ("move_ids.product_id", "in", self.storable_product_ids.ids),
            ]
        )

        if existing_transfers:
            return {
                "type": "ir.actions.client",
                "tag": "display_notification",
                "params": {
                    "title": "Transferts d√©j√† existants",
                    "message": (
                        f"Des transferts existent d√©j√† pour cette p√©riode "
                        f"({len(existing_transfers)} trouv√©(s)). "
                        "Voulez-vous les consulter depuis le menu Inventaire?",
                    ),
                    "type": "warning",
                    "sticky": True,
                },
            }

        transfers_created = []
        errors = []

        # Cr√©er un transfert pour chaque produit
        for product in self.storable_product_ids:
            try:
                # Cr√©er une configuration temporaire pour chaque produit
                temp_config = self.copy(
                    {"storable_product_ids": [(6, 0, [product.id])]}
                )

                if temp_config.needs_transfer():
                    picking = temp_config.create_transfer()
                    if picking:
                        transfers_created.append(picking)

                # Supprimer la config temporaire
                temp_config.unlink()
            except Exception as e:  # pylint: disable=broad-exception-caught
                # Fonction automatique : doit continuer m√™me en cas d'erreur
                error_msg = f"Erreur pour {product.name}: {str(e)}"
                errors.append(error_msg)
                # Log d√©taill√© pour le debugging
                _logger.exception(
                    "Erreur lors du transfert automatique pour %s", product.name
                )

        # Pr√©parer le message de retour
        if transfers_created and not errors:
            message = (
                f"‚úÖ {len(transfers_created)}" f" transfert(s) cr√©√©(s) avec succ√®s !\n"
            )
            message += "\n".join(
                [f"‚Ä¢ {p.name} ({p.origin})" for p in transfers_created]
            )
            notification_type = "success"
            title = "Transferts g√©n√©r√©s"
        elif transfers_created and errors:
            message = (
                f"‚ö†Ô∏è {len(transfers_created)} transfert(s) cr√©√©(s),"
                f" {len(errors)} erreur(s):\n"
            )
            message += "\n".join([f"‚úÖ {p.name}" for p in transfers_created])
            message += "\n" + "\n".join([f"‚ùå {e}" for e in errors])
            notification_type = "warning"
            title = "Transferts partiellement g√©n√©r√©s"
        else:
            message = "‚ùå Aucun transfert g√©n√©r√©.\n"
            message += (
                "\n".join([f"‚Ä¢ {e}" for e in errors])
                if errors
                else "V√©rifiez la configuration."
            )
            notification_type = "danger"
            title = "√âchec de g√©n√©ration"

        return {
            "type": "ir.actions.client",
            "tag": "display_notification",
            "params": {
                "title": title,
                "message": message,
                "type": notification_type,
                "sticky": True,
            },
        }
