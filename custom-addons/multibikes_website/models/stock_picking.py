# -*- coding: utf-8 -*-

from odoo import models, fields, api
from odoo.exceptions import UserError

class StockPicking(models.Model):
    _inherit = 'stock.picking'

    # === Champs ===
    is_period_transfer = fields.Boolean(
        string="Transfert de p√©riode",
        default=False,
        help="Indique si ce transfert fait partie d'un transfert saisonnier automatique",
        copy=False,
        readonly=True  # Prot√©g√© dans l'interface
    )
    
    period_config_id = fields.Many2one(
        'mb_renting_period',
        string="Configuration de p√©riode",
        help="Configuration de p√©riode associ√©e √† ce transfert",
        copy=False,
        ondelete='set null',
        readonly=True  # Prot√©g√© dans l'interface
    )

    # === Protection avec clause d'urgence ===
    
    def _check_period_transfer_immutability(self):
        """
        Verrouillage avec possibilit√© de d√©verrouillage temporaire
        """
        period_transfers = self.filtered('is_period_transfer')
        if period_transfers:
            transfer_names = period_transfers.mapped('name')
            raise UserError(
                "üö´ TRANSFERTS DE P√âRIODE VERROUILL√âS üö´\n\n"
                f"Transferts prot√©g√©s :\n‚Ä¢ {chr(10).join(transfer_names)}\n\n"
                "‚ùå Ces transferts ne peuvent pas √™tre modifi√©s\n"
                "‚úÖ Ils sont g√©r√©s automatiquement par le syst√®me saisonnier\n\n"
                "‚ö†Ô∏è  Contactez le d√©veloppeur pour une intervention d'urgence"
            )

    def write(self, vals):
        """
        Protection avec clause de d√©verrouillage temporaire
        """
        # Clause d'urgence : d√©verrouillage temporaire
        if self.env.context.get('admin_override'):
            return super(StockPicking, self).write(vals)
            
        # Protection normale
        self._check_period_transfer_immutability()
        
        return super().write(vals)

    def unlink(self):
        """
        Protection contre la suppression avec clause d'urgence
        """
        # Clause d'urgence
        if self.env.context.get('admin_override'):
            return super(StockPicking, self).unlink()
            
        # Protection normale
        self._check_period_transfer_immutability()
        
        return super().unlink()

    # === M√©thode d'urgence cach√©e ===
    
    def _emergency_admin_override(self, confirmation_code, action_vals):
        """
        M√©thode d'urgence pour modifications temporaires
        
        :param confirmation_code: Code de confirmation
        :param action_vals: Dictionnaire des valeurs √† modifier
        :return: R√©sultat de l'op√©ration
        """
        if confirmation_code != "ADMIN_OVERRIDE_2024":
            raise UserError("Code de confirmation incorrect")
            
        # Modification avec bypass temporaire
        return self.with_context(admin_override=True).write(action_vals)
    
    # === Contrainte de coh√©rence ===
    
    @api.constrains('is_period_transfer', 'period_config_id')
    def _check_period_config_consistency(self):
        """
        V√©rification de coh√©rence
        """
        for picking in self:
            if picking.is_period_transfer and not picking.period_config_id:
                raise UserError(
                    f"Le transfert de p√©riode {picking.name} doit avoir "
                    "une configuration de p√©riode associ√©e."
                )
