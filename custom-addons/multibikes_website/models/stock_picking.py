# -*- coding: utf-8 -*-
"""Model Stock Picking for Multibikes Website Module."""
from datetime import timedelta
import logging
from odoo import models, fields, api
from odoo.exceptions import UserError, ValidationError, AccessError, MissingError


_logger = logging.getLogger(__name__)


class StockPicking(models.Model):
    _inherit = "stock.picking"

    # === Champs ===
    is_period_transfer = fields.Boolean(
        string="Transfert de p√©riode",
        default=False,
        help="Indique si ce transfert fait partie"
        " d'un transfert saisonnier automatique",
        copy=False,
        readonly=True,  # Prot√©g√© dans l'interface
    )

    period_config_id = fields.Many2one(
        "mb.renting.stock.period.config",
        string="Configuration de p√©riode",
        help="Configuration de p√©riode associ√©e √† ce transfert",
        copy=False,
        ondelete="set null",
        readonly=True,  # Prot√©g√© dans l'interface
    )

    # Nouveau champ pour identifier les transferts rat√©s
    has_failed_products = fields.Boolean(
        string="Transfert partiellement rat√©",
        default=False,
        help="Indique si certains produits du transfert n'ont pas pu √™tre trait√©s",
        compute="_compute_has_failed_products",
        store=True,
    )

    failed_product_details = fields.Text(
        string="D√©tails des √©checs produits",
        help="Liste des produits qui n'ont pas pu √™tre transf√©r√©s avec les quantit√©s",
        compute="_compute_failed_product_details",
        store=True,
    )

    # === Champs calcul√©s pour l'analyse des √©checs ===

    @api.depends(
        "move_ids",
        "move_ids.state",
        "move_ids.product_uom_qty",
        "move_ids.move_line_ids",
        "move_ids.move_line_ids.qty_done",
        "state",
    )
    def _compute_has_failed_products(self):
        """D√©termine si le transfert a des produits en √©chec"""
        for picking in self:
            if not picking.is_period_transfer:
                picking.has_failed_products = False
                continue

            has_failures = False

            if picking.state in [
                "draft",
                "waiting",
                "confirmed",
                "partially_available",
            ]:
                # V√©rifier si certains mouvements n'ont pas assez de stock r√©serv√©
                for move in picking.move_ids:
                    if move.state not in ["done", "cancel"]:
                        # Calculer la quantit√© effectivement r√©serv√©e via les move_lines
                        reserved_qty = sum(move.move_line_ids.mapped("quantity"))
                        if move.product_uom_qty > reserved_qty:
                            has_failures = True
                            break

                # Ou si le transfert est en retard
                if not has_failures and picking.scheduled_date:
                    now = fields.Datetime.now()
                    if picking.scheduled_date < now - timedelta(hours=2):
                        has_failures = True

            picking.has_failed_products = has_failures

    @api.depends(
        "move_ids",
        "move_ids.state",
        "move_ids.product_uom_qty",
        "move_ids.move_line_ids",
        "move_ids.move_line_ids.qty_done",
    )
    def _compute_failed_product_details(self):
        """Calcule les d√©tails des produits en √©chec"""
        for picking in self:
            if not picking.is_period_transfer:
                picking.failed_product_details = ""
                continue

            failed_details = []

            for move in picking.move_ids:
                if move.state not in ["done", "cancel"]:
                    qty_expected = move.product_uom_qty

                    # Quantit√© r√©serv√©e = somme des quantit√©s dans les move_lines
                    qty_reserved = sum(move.move_line_ids.mapped("quantity"))

                    # Quantit√© effectivement faite =
                    # somme des qty_done dans les move_lines
                    qty_done = sum(move.move_line_ids.mapped("qty_done"))

                    if qty_expected > qty_reserved:
                        shortage = qty_expected - qty_reserved
                        failed_details.append(
                            f"‚Ä¢ {move.product_id.name}"
                            f" (R√©f: {move.product_id.default_code or 'N/A'}): "
                            f"Manque {shortage} sur {qty_expected} attendues"
                            f" (r√©serv√©: {qty_reserved}, fait: {qty_done})"
                        )

            # Ajouter info sur le retard si applicable
            if picking.scheduled_date and not failed_details:
                now = fields.Datetime.now()
                if picking.scheduled_date < now - timedelta(hours=2):
                    delay_hours = (now - picking.scheduled_date).total_seconds() / 3600
                    failed_details.append(
                        f"‚ö†Ô∏è Transfert en retard de {delay_hours:.1f} heures"
                    )

            picking.failed_product_details = (
                "\n".join(failed_details) if failed_details else ""
            )

    # === M√©thodes de d√©tection des transferts rat√©s ===

    @api.model
    def detect_failed_transfers(self):
        """
        M√©thode utilitaire qui d√©tecte les transferts rat√©s et retourne une liste d'IDs

        Returns:
            list: Liste des IDs des transferts (stock.picking) consid√©r√©s comme √©chou√©s
        """
        _logger.info("üîç D√©but de la d√©tection des transferts rat√©s")

        failed_transfer_ids = []
        now = fields.Datetime.now()

        # D√©finir la tol√©rance (par exemple 2 heures apr√®s l'heure programm√©e)
        tolerance_hours = 2
        cutoff_datetime = now - timedelta(hours=tolerance_hours)

        # Rechercher les transferts automatiques potentiellement rat√©s
        domain = [
            ("is_period_transfer", "=", True),  # Transferts de p√©riode
            ("scheduled_date", "<=", cutoff_datetime),  # Date programm√©e d√©pass√©e
            ("state", "in", ["draft", "waiting", "confirmed", "partially_available"]),
        ]

        failed_pickings = self.search(domain)

        for picking in failed_pickings:
            # V√©rifications suppl√©mentaires pour confirmer l'√©chec
            scheduled_date = picking.scheduled_date
            delay_hours = (now - scheduled_date).total_seconds() / 3600

            # Log d√©taill√© pour diagnostic
            _logger.warning("üö® Transfert rat√© d√©tect√©: %s", picking.name)
            _logger.warning("   - Date programm√©e: %s", scheduled_date)
            _logger.warning("   - Retard: %.1f heures", delay_hours)
            _logger.warning("   - √âtat actuel: %s", picking.state)
            _logger.warning("   - Origine: %s", picking.origin)

            # Analyser les d√©tails des √©checs par produit
            failed_products = self._analyze_product_failures(picking)
            if failed_products:
                _logger.error("   - Probl√®mes de stock d√©tect√©s:")
                for product_issue in failed_products:
                    _logger.error(
                        "     * %s : besoin %s, r√©serv√© %s, manque %s",
                        product_issue["product"],
                        product_issue["needed"],
                        product_issue["reserved"],
                        product_issue["shortage"],
                    )

            failed_transfer_ids.append(picking.id)

        _logger.info(
            "üîç D√©tection termin√©e: %s transferts rat√©s trouv√©s",
            len(failed_transfer_ids),
        )

        # Si des transferts rat√©s sont trouv√©s, log un r√©sum√©
        if failed_transfer_ids:
            _logger.error(
                "üö® ALERTE: %s transferts sont en √©chec!", len(failed_transfer_ids)
            )
            _logger.error("   IDs concern√©s: %s", failed_transfer_ids)

            # Notifier les √©checs
            self._notify_failed_transfers(failed_transfer_ids)

        return failed_transfer_ids

    def _analyze_product_failures(self, picking):
        """
        Analyse les √©checs par produit pour un transfert donn√©

        Args:
            picking: Enregistrement stock.picking √† analyser

        Returns:
            list: Liste des dictionnaires d√©crivant les √©checs par produit
        """
        failed_products = []

        for move in picking.move_ids:
            if move.state in ["waiting", "confirmed", "partially_available"]:
                # Calculer les quantit√©s via les move_lines
                reserved_qty = sum(move.move_line_ids.mapped("quantity"))
                done_qty = sum(move.move_line_ids.mapped("qty_done"))
                needed_qty = move.product_uom_qty

                if needed_qty > reserved_qty:
                    shortage = needed_qty - reserved_qty
                    failed_products.append(
                        {
                            "move_id": move.id,
                            "product": move.product_id.name,
                            "product_id": move.product_id.id,
                            "product_code": move.product_id.default_code or "N/A",
                            "needed": needed_qty,
                            "reserved": reserved_qty,
                            "done": done_qty,
                            "shortage": shortage,
                            "location_src": move.location_id.name,
                            "location_dest": move.location_dest_id.name,
                        }
                    )

        return failed_products

    def get_failed_products_for_virtualization(self):
        """
        Retourne les d√©tails des produits en √©chec pour la virtualisation

        Returns:
            dict: Dictionnaire avec les d√©tails des √©checs pour virtualisation
        """
        self.ensure_one()

        if not self.is_period_transfer:
            return {}

        failed_products = self._analyze_product_failures(self)

        virtualization_data = {
            "picking_id": self.id,
            "picking_name": self.name,
            "period_config_id": (
                self.period_config_id.id if self.period_config_id else False
            ),
            "scheduled_date": self.scheduled_date,
            "current_state": self.state,
            "failed_products": [],
        }

        for product_failure in failed_products:
            virtualization_data["failed_products"].append(
                {
                    "product_id": product_failure["product_id"],
                    "product_name": product_failure["product"],
                    "product_code": product_failure["product_code"],
                    "shortage_qty": product_failure["shortage"],
                    "location_src_id": self.location_id.id,
                    "location_dest_id": self.location_dest_id.id,
                    "transfer_direction": self._get_transfer_direction(),
                }
            )

        return virtualization_data

    def _get_transfer_direction(self):
        """
        D√©termine la direction du transfert (vers/depuis hivernage)

        Returns:
            str: 'to_winter', 'from_winter', ou 'unknown'
        """
        self.ensure_one()

        # R√©cup√©rer les entrep√¥ts
        main_warehouse = self.env["stock.warehouse"].get_main_rental_warehouse()
        winter_warehouse = self.env["stock.warehouse"].get_winter_storage_warehouse()

        if not main_warehouse or not winter_warehouse:
            return "unknown"

        if (
            self.location_id == main_warehouse.lot_stock_id
            and self.location_dest_id == winter_warehouse.lot_stock_id
        ):
            return "to_winter"
        if (
            self.location_id == winter_warehouse.lot_stock_id
            and self.location_dest_id == main_warehouse.lot_stock_id
        ):
            return "from_winter"
        return "unknown"

    def _notify_failed_transfers(self, failed_transfer_ids):
        """
        M√©thode priv√©e pour notifier les transferts rat√©s

        Args:
            failed_transfer_ids (list): Liste des IDs des transferts rat√©s
        """
        if not failed_transfer_ids:
            return

        try:
            message_body = f"""
            <p><strong>‚ö†Ô∏è Transferts de stock en √©chec d√©tect√©s</strong></p>
            <p>{len(failed_transfer_ids)}
            transferts automatiques n'ont pas pu √™tre ex√©cut√©s:</p>
            <ul>
            """

            failed_pickings = self.browse(failed_transfer_ids)
            for picking in failed_pickings:
                message_body += (
                    f"<li>{picking.name} - {picking.origin}"
                    f" (pr√©vu le {picking.scheduled_date})</li>"
                )

            message_body += """
            </ul>
            <p>Veuillez v√©rifier les stocks et traiter ces transferts.</p>
            """

            # Cr√©er une activit√© pour les gestionnaires de stock
            admin_users = self.env["res.users"].search(
                [("groups_id", "in", [self.env.ref("stock.group_stock_manager").id])]
            )

            for admin in admin_users:
                self.env["mail.activity"].create(
                    {
                        "summary": "üö® Transferts de stock en √©chec",
                        "note": message_body,
                        "res_model": "stock.picking",
                        "res_id": (
                            failed_pickings[0].id if failed_pickings else admin.id
                        ),
                        "user_id": admin.id,
                        "activity_type_id": self.env.ref(
                            "mail.mail_activity_data_todo"
                        ).id,
                        "date_deadline": fields.Date.today(),
                    }
                )

            _logger.info(
                "üìß Notifications envoy√©es √† %s administrateurs", len(admin_users)
            )

        except (ValidationError, AccessError, MissingError) as e:
            _logger.error("‚ùå Erreur lors de l'envoi des notifications: %s", e)
        except Exception:
            _logger.error("‚ùå Erreur inattendue lors de l'envoi des notifications")
            raise  # Re-raise pour ne pas masquer les erreurs critiques

    @api.model
    def attempt_retry_failed_transfers(self, failed_transfer_ids=None):
        """
        Tente de relancer automatiquement les transferts rat√©s

        Args:
            failed_transfer_ids (list, optional): Liste sp√©cifique d'IDs √† traiter.

        Returns:
            dict: R√©sum√© des actions effectu√©es
        """
        if failed_transfer_ids is None:
            failed_transfer_ids = self.detect_failed_transfers()

        if not failed_transfer_ids:
            return {
                "success": 0,
                "failed": 0,
                "message": "Aucun transfert rat√© √† traiter",
            }

        _logger.info(
            "üí° Tentative de relance de %s transferts", len(failed_transfer_ids)
        )

        success_count = 0
        still_failed_count = 0
        results = []

        failed_pickings = self.browse(failed_transfer_ids)

        for picking in failed_pickings:
            try:
                # Tenter de v√©rifier la disponibilit√©
                picking.action_assign()

                # Si maintenant disponible, noter le succ√®s
                if picking.state == "assigned":
                    success_count += 1
                    results.append(f"‚úÖ {picking.name}: r√©assign√© avec succ√®s")
                    _logger.info("‚úÖ Transfert %s r√©par√© automatiquement", picking.name)
                else:
                    still_failed_count += 1
                    results.append(
                        f"‚ùå {picking.name}: toujours bloqu√© ({picking.state})"
                    )
                    _logger.warning("‚ùå Transfert %s toujours en √©chec", picking.name)

            except Exception as e:
                still_failed_count += 1
                results.append(f"üí• {picking.name}: erreur lors de la relance - {e}")
                _logger.error(
                    "üí• Erreur lors de la relance de %s : %s", picking.name, e
                )

        summary = {
            "success": success_count,
            "failed": still_failed_count,
            "details": results,
            "message": f"{success_count} transferts relanc√©s,"
            f" {still_failed_count} toujours en √©chec",
        }

        _logger.info("üí° Relance termin√©e: %s", {summary["message"]})
        return summary

    # === Protection avec clause d'urgence ===

    def _check_period_transfer_immutability(self):
        """
        Verrouillage avec possibilit√© de d√©verrouillage temporaire
        """
        period_transfers = self.filtered("is_period_transfer")
        if period_transfers:
            transfer_names = period_transfers.mapped("name")
            raise UserError(
                "üö´ TRANSFERTS DE P√âRIODE VERROUILL√âS üö´\n\n"
                f"Transferts prot√©g√©s :\n‚Ä¢ {chr(10).join(transfer_names)}\n\n"
                "‚ùå Ces transferts ne peuvent pas √™tre modifi√©s\n"
                "‚úÖ Ils sont g√©r√©s automatiquement par le syst√®me saisonnier\n\n"
                "‚ö†Ô∏è  Contactez le d√©veloppeur pour une intervention d'urgence"
            )

    def write(self, vals):
        """
        Protection avec clause de d√©verrouillage temporaire
        """
        # Clause d'urgence : d√©verrouillage temporaire
        if self.env.context.get("admin_override"):
            return super().write(vals)

        # Protection normale
        self._check_period_transfer_immutability()

        return super().write(vals)

    def unlink(self):
        """
        Protection contre la suppression avec clause d'urgence
        """
        # Clause d'urgence
        if self.env.context.get("admin_override"):
            return super().unlink()

        # Protection normale
        self._check_period_transfer_immutability()

        return super().unlink()

    # === Contrainte de coh√©rence ===

    @api.constrains("is_period_transfer", "period_config_id")
    def _check_period_config_consistency(self):
        """
        V√©rification de coh√©rence
        """
        for picking in self:
            if picking.is_period_transfer and not picking.period_config_id:
                raise UserError(
                    f"Le transfert de p√©riode {picking.name} doit avoir "
                    "une configuration de p√©riode associ√©e."
                )

    def action_emergency_unlock_wizard(self):
        """Ouvrir le wizard de d√©verrouillage avec mot de passe"""

        if not self.is_period_transfer:
            raise UserError("‚ùå Ce transfert n'est pas verrouill√©")

        return {
            'type': 'ir.actions.act_window',
            'name': 'D√©verrouiller Transfert de P√©riode',
            'res_model': 'stock.picking.unlock.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_picking_id': self.id,
            }
        }
    def action_emergency_relock(self):
        """Bouton pour re-verrouiller un transfert de p√©riode apr√®s test"""
        if not self.env.user.has_group('base.group_system'):
            raise UserError("Seuls les administrateurs peuvent verrouiller les transferts")

        if not self.period_config_id:
            raise UserError("Ce transfert n'est pas associ√© √† une configuration de p√©riode")

        self.with_context(admin_override=True).write({
            'is_period_transfer': True,
            'note': f"üîí Re-verrouill√© manuellement le {fields.Datetime.now()} par {self.env.user.name}"
        })

        return {
            'type': 'ir.actions.client',
            'tag': 'reload',  # Refresh complet de la page
            'params': {
                'next': {
                    'type': 'ir.actions.client',
                    'tag': 'display_notification',
                    'params': {
                        'title': 'üîí Transfert re-verrouill√©',
                        'message': f'Le transfert {self.name} est maintenant prot√©g√©',
                        'type': 'success',
                    }
                }
            }
        }
